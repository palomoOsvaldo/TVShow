//
//  LoginViewController.swift
//  TVShow
//
//  Created Osvaldo Salas on 16/03/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import AuthenticationServices

class LoginViewController: UIViewController {
    
    // MARK: - Properties
    var presenter: LoginPresenterProtocol?
    
    let attributes = [
        NSAttributedString.Key.font : UIFont.systemFont(ofSize: 16, weight: .bold)
    ]
    
    lazy var stack: UIStackView = {
        let stack = UIStackView()
        stack.alignment = .fill
        stack.distribution = .fill
        stack.axis = .vertical
        stack.spacing = 20
        stack.translatesAutoresizingMaskIntoConstraints = false
        return stack
    }()
    
    lazy var txtUser: UITextField = {
        let txtUser = UITextField()
        txtUser.borderStyle = .roundedRect
        txtUser.autocorrectionType = .no
        txtUser.autocapitalizationType = .none
        txtUser.keyboardType = .emailAddress
        txtUser.attributedPlaceholder = NSAttributedString(string: "Username", attributes: attributes)
        txtUser.translatesAutoresizingMaskIntoConstraints = false
        return txtUser
    }()
    
    lazy var txtPassword: UITextField = {
        let txtPassword = UITextField()
        txtPassword.borderStyle = .roundedRect
        txtPassword.isSecureTextEntry = true
        txtPassword.attributedPlaceholder = NSAttributedString(string: "Password", attributes: attributes)
        txtPassword.translatesAutoresizingMaskIntoConstraints = false
        return txtPassword
    }()
    
    lazy var btnLogin: UIButton = {
        let btnLogin = UIButton(type: .roundedRect)
        btnLogin.setTitle("Log in", for: .normal)
        btnLogin.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .bold)
        btnLogin.backgroundColor = .backgroundBtn()
        btnLogin.tintColor = .white
        btnLogin.addTarget(self, action: #selector(btnLoginAction(_:)), for: .touchUpInside)
        return btnLogin
    }()
    
    lazy var lblError: UILabel = {
        let lblError = UILabel()
        lblError.font = UIFont.systemFont(ofSize: 14, weight: .bold)
        lblError.text = ""
        lblError.textColor = .colorError()
        lblError.numberOfLines = 0
        lblError.translatesAutoresizingMaskIntoConstraints = false
        return lblError
    }()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configView()
    }
    
    // MARK: - Actions
    @objc func btnLoginAction(_ sender: Any) {
        let user = txtUser.text
        let pass = txtPassword.text
        Loader.showLoader(referenceView: self.view)
        self.presenter?.willGetRequestToken(username: user ?? "", password: pass ?? "")
    }
}

extension LoginViewController: LoginViewProtocol {
    func showHome(session: String) {
        Loader.hide()
        self.presenter?.willGoingToHome()
    }
    
    func mostrarAlerta(mensaje: String) {
        Loader.hide()
        lblError.text = mensaje
    }
}

// MARK: - UI Setup
extension LoginViewController {
    func configView() {
        self.view.backgroundColor = .black
        
        stack.addArrangedSubview(txtUser)
        stack.addArrangedSubview(txtPassword)
        stack.addArrangedSubview(btnLogin)
        
        view.addSubview(stack)
        view.addSubview(lblError)
        
        txtUser.heightAnchor.constraint(equalToConstant: 50).isActive = true
        txtPassword.heightAnchor.constraint(equalToConstant: 50).isActive = true
        btnLogin.heightAnchor.constraint(equalToConstant: 50).isActive = true
        
        stack.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        stack.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        stack.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 40).isActive = true
        stack.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -40).isActive = true
        
        lblError.topAnchor.constraint(equalTo: stack.bottomAnchor, constant: 20).isActive = true
        lblError.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 15).isActive = true
        lblError.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -15).isActive = true
    }
}
